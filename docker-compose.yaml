version: '3'

services:
  timescaledb:
    image: xbgmsharp/timescaledb-postgis:latest
    container_name: timescaledb
    restart: unless-stopped
    environment:
      PGUSER: ${POSTGRES_USER}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - 5432:5432
    volumes:
      - ./sql/timescaledb-initdb:/docker-entrypoint-initdb.d
      - ${DOCKERVOLUMES}/timescaledb/data:/var/lib/postgresql/data
      - ${DOCKERVOLUMES}/timescaledb/logs:/logs
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 12
    command:
      - -cshared_preload_libraries=timescaledb,pg_stat_statements,pg_cron
      - -ccron.database_name=${POSTGRES_DB}
      - -cpg_stat_statements.track=all
      - -clogging_collector=on
      - -clog_directory=/logs
      - -clog_filename=postgresql.log
      - -clog_statement=ddl
    networks:
      - monitoring

  ogn:
    image: ogn-client-rs
    container_name: ogn
    depends_on:
      timescaledb:
        condition: service_healthy
    volumes:
      - ${DOCKERVOLUMES}/ogn-logfiles:/ogn-logfiles
    restart: unless-stopped
    command: ogn-client --target postgre-sql --database-url postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@timescaledb:5432/${POSTGRES_DB}
    #restart: "no"
    #command: ["sh", "-c", "gzip -c -d /ogn-logfiles/stdout.log-20230325.gz | ogn-client --source stdin --target postgre-sql --database-url postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@timescaledb:5432/${POSTGRES_DB}"]
    networks:
      - monitoring
  
  ressources:
    image: ressources
    container_name: ressources
    depends_on:
      timescaledb:
        condition: service_healthy
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ${DOCKERVOLUMES}/ressources:/ressources
    command: ["sh", "-c", "./entrypoint_update_once.sh && ./entrypoint_cron.sh"]
    networks:
      - monitoring

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4
    depends_on:
      - timescaledb
    restart: unless-stopped
    ports:
      - "${PGADMIN_PORT:-5050:80}"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    user: "0"
    container_name: grafana
    depends_on:
      - timescaledb
    restart: unless-stopped
    ports:
      - 3000:3000
    environment:
      GF_INSTALL_PLUGINS: grafana-worldmap-panel,pr0ps-trackmap-panel,nline-plotlyjs-panel
      GF_AUTH_ANONYMOUS_ENABLED: 'True'
      GF_SERVER_DOMAIN: 'localhost'
      GF_DATABASE_URL: 'postgres://${GRAFANA_USER}:${GRAFANA_PASSWORD}@timescaledb:5432/${GRAFANA_DB}'
      GF_PLUGINS_ENABLE_ALPHA: 'True'
      POSTGRES_DB: ${POSTGRES_DB}
      GRAFANA_READER_USER: ${GRAFANA_READER_USER}
      GRAFANA_READER_PASSWORD: ${GRAFANA_READER_PASSWORD}
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - monitoring

  nginx:
    image: nginx:latest
    container_name: nginx
    depends_on:
      - timescaledb
      - grafana
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ${DOCKERVOLUMES}/nginx:/var/log/nginx
    networks:
      - monitoring

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    depends_on:
      - nginx
    restart: unless-stopped
    volumes:
      - ./promtail:/etc/promtail
      - ${DOCKERVOLUMES}/nginx:/var/log/nginx
      - ${DOCKERVOLUMES}/timescaledb/logs:/var/log/timescaledb
    command: -config.file=/etc/promtail/promtail-config.yaml
    networks:
      - monitoring

  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    ports:
      - 3100:3100
    volumes:
      - ./loki:/etc/loki
    command: -config.file=/etc/loki/loki-config.yaml
    networks:
      - monitoring

  telegraf:
    image: telegraf:latest
    container_name: telegraf
    depends_on:
      - timescaledb
    restart: unless-stopped
    environment:
      TELEGRAF_USER: ${TELEGRAF_USER}
      TELEGRAF_PASSWORD: ${TELEGRAF_PASSWORD}
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
    networks:
      - monitoring

  nodejs:
    image: nodejs
    container_name: nodejs
    depends_on:
      - timescaledb
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      NODEJS_USER: ${NODEJS_USER}
      NODEJS_PASSWORD: ${NODEJS_PASSWORD}
    volumes:
      - ./nodejs/app.js:/app/app.js
    #command: "npm start"
    command: "node --trace-warnings --watch app.js"  # development...
    networks:
      - monitoring

networks:
  monitoring:
    driver: bridge
